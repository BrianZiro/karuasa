from django.db import models
from django.utils import timezone
from members.models import Member

# Base models first
class Course(models.Model):
    COURSES = [
        ('intro_actuarial', 'Introduction to Actuarial Science'),
        ('probability_stats_1', 'Probability and Statistics 1'),
        ('discrete_math_1', 'Discrete Mathematics 1'),
        ('discrete_math_2', 'Discrete Mathematics 2'),
        ('calculus_1', 'Calculus 1'),
        ('calculus_2', 'Calculus 2'),
        ('linear_algebra_1', 'Linear Algebra 1'),
        ('financial_math_1', 'Financial Mathematics 1'),
        ('fundamentals_actuarial', 'Fundamentals of Actuarial Mathematics'),
        ('mathematics_2', 'Mathematics 2'),
        ('operations_research_1', 'Operations Research 1'),
        ('time_series', 'Time Series Analysis'),
        ('statistical_inference', 'Statistical Inference'),
        ('life_contingencies_1', 'Life Contingencies 1'),
        ('life_contingencies_2', 'Life Contingencies 2'),
        ('loss_models_1', 'Loss Models 1'),
        ('loss_models_2', 'Loss Models 2'),
        ('survival_models', 'Survival Models'),
        ('risk_math', 'Risk Mathematics'),
        ('computational_finance', 'Computational Finance'),
        ('bayesian_analysis', 'Bayesian Data Analysis'),
        ('machine_learning', 'Machine Learning'),
    ]
    
    course_code = models.CharField(max_length=50, unique=True)
    name = models.CharField(max_length=200)
    description = models.TextField()
    content = models.TextField()  # Generated by Gemini API
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name


class Competition(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField()
    problem_statement = models.TextField()  # Generated by Gemini API
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

    @property
    def progress_percentage(self):
        """Calculate competition progress percentage"""
        total_duration = (self.end_date - self.start_date).total_seconds()
        elapsed_time = (timezone.now() - self.start_date).total_seconds()
        
        if total_duration <= 0:
            return 100
        
        progress = (elapsed_time / total_duration) * 100
        return min(100, max(0, progress))


class UserProgress(models.Model):
    member = models.OneToOneField(Member, on_delete=models.CASCADE)
    completed_courses = models.ManyToManyField(Course, blank=True)
    total_points = models.IntegerField(default=0)
    current_level = models.IntegerField(default=1)

    def __str__(self):
        return f"Progress for {self.member.username}"


# Competition submission (depends on Competition and Member)
class CompetitionSubmission(models.Model):
    competition = models.ForeignKey(Competition, on_delete=models.CASCADE)
    participant = models.ForeignKey(Member, on_delete=models.CASCADE)
    solution = models.TextField()
    score = models.FloatField(null=True, blank=True)
    submitted_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['competition', 'participant']

    def __str__(self):
        return f"Submission by {self.participant} for {self.competition}"